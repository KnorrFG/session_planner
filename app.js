/* Generated by the Nim Compiler v1.4.4 */
var framePtr = null;
var excHandler = 0;
var lastJSError = null;
var NTI1188005 = {size: 0,kind: 36,base: null,node: null,finalizer: null};
var NTI10820008 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI1194641 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI1188044 = {size: 0,kind: 31,base: null,node: null,finalizer: null};
var NTI5635232 = {size: 0,kind: 31,base: null,node: null,finalizer: null};
var NTI5890011 = {size: 0, kind: 18, base: null, node: null, finalizer: null};
var NTI1194635 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI1194633 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI1194637 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI1194657 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI1194621 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI1194643 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI1194649 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI1194408 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI1194728 = {size: 0,kind: 22,base: null,node: null,finalizer: null};
var NTI1188013 = {size: 0,kind: 28,base: null,node: null,finalizer: null};
var NTI1188015 = {size: 0,kind: 29,base: null,node: null,finalizer: null};
var NTI1194723 = {size: 0,kind: 22,base: null,node: null,finalizer: null};
var NTI1194617 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI1194619 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI1194653 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI1194418 = {size: 0,kind: 31,base: null,node: null,finalizer: null};
var NTI1194404 = {size: 0,kind: 20,base: null,node: null,finalizer: null};
NTI1194404.base = NTI1194418;
var NNI1194653 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI1194653.node = NNI1194653;
var NNI1194619 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI1194619.node = NNI1194619;
NTI1194723.base = NTI1194617;
NTI1194728.base = NTI1194617;
var NNI1194617 = {kind: 2, len: 5, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "parent", len: 0, typ: NTI1194723, name: "parent", sons: null}, 
{kind: 1, offset: "name", len: 0, typ: NTI1188015, name: "name", sons: null}, 
{kind: 1, offset: "message", len: 0, typ: NTI1188013, name: "msg", sons: null}, 
{kind: 1, offset: "trace", len: 0, typ: NTI1188013, name: "trace", sons: null}, 
{kind: 1, offset: "up", len: 0, typ: NTI1194728, name: "up", sons: null}]};
NTI1194617.node = NNI1194617;
var NNI1194408 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI1194408.node = NNI1194408;
NTI1194617.base = NTI1194408;
NTI1194619.base = NTI1194617;
NTI1194653.base = NTI1194619;
var NNI1194649 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI1194649.node = NNI1194649;
NTI1194649.base = NTI1194619;
var NNI1194643 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI1194643.node = NNI1194643;
var NNI1194621 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI1194621.node = NNI1194621;
NTI1194621.base = NTI1194617;
NTI1194643.base = NTI1194621;
var NNI1194657 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI1194657.node = NNI1194657;
NTI1194657.base = NTI1194619;
var NNI1194637 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI1194637.node = NNI1194637;
var NNI1194633 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI1194633.node = NNI1194633;
NTI1194633.base = NTI1194619;
NTI1194637.base = NTI1194633;
var NNI1194635 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI1194635.node = NNI1194635;
NTI1194635.base = NTI1194633;
var NNI5890011 = {kind: 2, len: 2, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "a", len: 0, typ: NTI5635232, name: "a", sons: null}, 
{kind: 1, offset: "b", len: 0, typ: NTI1188044, name: "b", sons: null}]};
NTI5890011.node = NNI5890011;
var NNI1194641 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI1194641.node = NNI1194641;
NTI1194641.base = NTI1194619;
NTI10820008.base = NTI1188005;
function setConstr() {
        var result = {};
    for (var i = 0; i < arguments.length; ++i) {
      var x = arguments[i];
      if (typeof(x) == "object") {
        for (var j = x[0]; j <= x[1]; ++j) {
          result[j] = true;
        }
      } else {
        result[x] = true;
      }
    }
    return result;
  

  
}
var ConstSet1 = setConstr(17, 16, 4, 18, 27, 19, 23, 22, 21);
function nimCopy(dest_1470023, src_1470024, ti_1470025) {
  var result_1475219 = null;

    switch (ti_1470025.kind) {
    case 21:
    case 22:
    case 23:
    case 5:
      if (!(isFatPointer_1465401(ti_1470025))) {
      result_1475219 = src_1470024;
      }
      else {
        result_1475219 = [src_1470024[0], src_1470024[1]];
      }
      
      break;
    case 19:
            if (dest_1470023 === null || dest_1470023 === undefined) {
        dest_1470023 = {};
      }
      else {
        for (var key in dest_1470023) { delete dest_1470023[key]; }
      }
      for (var key in src_1470024) { dest_1470023[key] = src_1470024[key]; }
      result_1475219 = dest_1470023;
    
      break;
    case 18:
    case 17:
      if (!((ti_1470025.base == null))) {
      result_1475219 = nimCopy(dest_1470023, src_1470024, ti_1470025.base);
      }
      else {
      if ((ti_1470025.kind == 17)) {
      result_1475219 = (dest_1470023 === null || dest_1470023 === undefined) ? {m_type: ti_1470025} : dest_1470023;
      }
      else {
        result_1475219 = (dest_1470023 === null || dest_1470023 === undefined) ? {} : dest_1470023;
      }
      }
      nimCopyAux(result_1475219, src_1470024, ti_1470025.node);
      break;
    case 24:
    case 4:
    case 27:
    case 16:
            if (src_1470024 === null) {
        result_1475219 = null;
      }
      else {
        if (dest_1470023 === null || dest_1470023 === undefined) {
          dest_1470023 = new Array(src_1470024.length);
        }
        else {
          dest_1470023.length = src_1470024.length;
        }
        result_1475219 = dest_1470023;
        for (var i = 0; i < src_1470024.length; ++i) {
          result_1475219[i] = nimCopy(result_1475219[i], src_1470024[i], ti_1470025.base);
        }
      }
    
      break;
    case 28:
            if (src_1470024 !== null) {
        result_1475219 = src_1470024.slice(0);
      }
    
      break;
    default: 
      result_1475219 = src_1470024;
      break;
    }

  return result_1475219;

}
function makeNimstrLit(c_1455062) {
      var ln = c_1455062.length;
  var result = new Array(ln);
  for (var i = 0; i < ln; ++i) {
    result[i] = c_1455062.charCodeAt(i);
  }
  return result;
  

  
}
function toJSStr(s_1455096) {
                    var Tmp5;
            var Tmp7;

  var result_1455097 = null;

    var res_1455170 = newSeq_1455128((s_1455096).length);
    var i_1455172 = 0;
    var j_1455174 = 0;
    L1: do {
        L2: while (true) {
        if (!(i_1455172 < (s_1455096).length)) break L2;
          var c_1455175 = s_1455096[i_1455172];
          if ((c_1455175 < 128)) {
          res_1455170[j_1455174] = String.fromCharCode(c_1455175);
          i_1455172 += 1;
          }
          else {
            var helper_1455198 = newSeq_1455128(0);
            L3: do {
                L4: while (true) {
                if (!true) break L4;
                  var code_1455199 = c_1455175.toString(16);
                  if ((((code_1455199) == null ? 0 : (code_1455199).length) == 1)) {
                  helper_1455198.push("%0");;
                  }
                  else {
                  helper_1455198.push("%");;
                  }
                  
                  helper_1455198.push(code_1455199);;
                  i_1455172 += 1;
                    if (((s_1455096).length <= i_1455172)) Tmp5 = true; else {                      Tmp5 = (s_1455096[i_1455172] < 128);                    }                  if (Tmp5) {
                  break L3;
                  }
                  
                  c_1455175 = s_1455096[i_1455172];
                }
            } while(false);
++excHandler;
            Tmp7 = framePtr;
            try {
            res_1455170[j_1455174] = decodeURIComponent(helper_1455198.join(""));
--excHandler;
} catch (EXC) {
 var prevJSError = lastJSError;
 lastJSError = EXC;
 --excHandler;
            framePtr = Tmp7;
            res_1455170[j_1455174] = helper_1455198.join("");
            lastJSError = prevJSError;
            } finally {
            framePtr = Tmp7;
            }
          }
          
          j_1455174 += 1;
        }
    } while(false);
    if (res_1455170.length < j_1455174) { for (var i=res_1455170.length;i<j_1455174;++i) res_1455170.push(null); }
               else { res_1455170.length = j_1455174; };
    result_1455097 = res_1455170.join("");

  return result_1455097;

}
function raiseException(e_1420218, ename_1420219) {
    e_1420218.name = ename_1420219;
    if ((excHandler == 0)) {
    unhandledException(e_1420218);
    }
    
    throw e_1420218;

  
}
function chckRange(i_1485016, a_1485017, b_1485018) {
      var Tmp1;

  var result_1485019 = 0;

  BeforeRet: do {
      if (!(a_1485017 <= i_1485016)) Tmp1 = false; else {        Tmp1 = (i_1485016 <= b_1485018);      }    if (Tmp1) {
    result_1485019 = i_1485016;
    break BeforeRet;
    }
    else {
    raiseRangeError();
    }
    
  } while (false);

  return result_1485019;

}
function cstrToNimstr(c_1455079) {
      var ln = c_1455079.length;
  var result = new Array(ln);
  var r = 0;
  for (var i = 0; i < ln; ++i) {
    var ch = c_1455079.charCodeAt(i);

    if (ch < 128) {
      result[r] = ch;
    }
    else {
      if (ch < 2048) {
        result[r] = (ch >> 6) | 192;
      }
      else {
        if (ch < 55296 || ch >= 57344) {
          result[r] = (ch >> 12) | 224;
        }
        else {
            ++i;
            ch = 65536 + (((ch & 1023) << 10) | (c_1455079.charCodeAt(i) & 1023));
            result[r] = (ch >> 18) | 240;
            ++r;
            result[r] = ((ch >> 12) & 63) | 128;
        }
        ++r;
        result[r] = ((ch >> 6) & 63) | 128;
      }
      ++r;
      result[r] = (ch & 63) | 128;
    }
    ++r;
  }
  return result;
  

  
}
function chckIndx(i_1480086, a_1480087, b_1480088) {
      var Tmp1;

  var result_1480089 = 0;

  BeforeRet: do {
      if (!(a_1480087 <= i_1480086)) Tmp1 = false; else {        Tmp1 = (i_1480086 <= b_1480088);      }    if (Tmp1) {
    result_1480089 = i_1480086;
    break BeforeRet;
    }
    else {
    raiseIndexError(i_1480086, a_1480087, b_1480088);
    }
    
  } while (false);

  return result_1480089;

}
var ConstSet2 = setConstr([97, 122], [65, 90], [48, 57], 95);
var ConstSet3 = setConstr([97, 122], [65, 90], [48, 57], 95);
var ConstSet4 = setConstr([48, 57]);
var ConstSet5 = setConstr([48, 57]);
var ConstSet6 = setConstr(101, 69);
var ConstSet7 = setConstr([48, 57]);
var ConstSet8 = setConstr([48, 57]);
function nimParseBiggestFloat(s_1505076, number_1505078, number_1505078_Idx, start_1505079) {
  var result_1505081 = 0;

  BeforeRet: do {
    var esign_1505082 = 1.0000000000000000e+00;
    var sign_1505083 = 1.0000000000000000e+00;
    var i_1505084 = start_1505079;
    var exponent_1505085 = 0;
    var flags_1505086 = 0;
    number_1505078[number_1505078_Idx] = 0.0;
    if ((s_1505076[i_1505084] == 43)) {
    i_1505084 += 1;
    }
    else {
    if ((s_1505076[i_1505084] == 45)) {
    sign_1505083 = -1.0000000000000000e+00;
    i_1505084 += 1;
    }
    }
    if (((s_1505076[i_1505084] == 78) || (s_1505076[i_1505084] == 110))) {
    if (((s_1505076[(i_1505084 + 1)] == 65) || (s_1505076[(i_1505084 + 1)] == 97))) {
    if (((s_1505076[(i_1505084 + 2)] == 78) || (s_1505076[(i_1505084 + 2)] == 110))) {
    if (!((ConstSet2[s_1505076[(i_1505084 + 3)]] != undefined))) {
    number_1505078[number_1505078_Idx] = NaN;
    result_1505081 = ((i_1505084 + 3) - start_1505079);
    break BeforeRet;
    }
    
    }
    
    }
    
    result_1505081 = 0;
    break BeforeRet;
    }
    
    if (((s_1505076[i_1505084] == 73) || (s_1505076[i_1505084] == 105))) {
    if (((s_1505076[(i_1505084 + 1)] == 78) || (s_1505076[(i_1505084 + 1)] == 110))) {
    if (((s_1505076[(i_1505084 + 2)] == 70) || (s_1505076[(i_1505084 + 2)] == 102))) {
    if (!((ConstSet3[s_1505076[(i_1505084 + 3)]] != undefined))) {
    number_1505078[number_1505078_Idx] = (Infinity * sign_1505083);
    result_1505081 = ((i_1505084 + 3) - start_1505079);
    break BeforeRet;
    }
    
    }
    
    }
    
    result_1505081 = 0;
    break BeforeRet;
    }
    
    L1: do {
        L2: while (true) {
        if (!(ConstSet4[s_1505076[i_1505084]] != undefined)) break L2;
          flags_1505086 = (flags_1505086 | 1);
          number_1505078[number_1505078_Idx] = ((number_1505078[number_1505078_Idx] * 1.0000000000000000e+01) + toFloat_1216659((s_1505076[i_1505084] - 48)));
          i_1505084 += 1;
          L3: do {
              L4: while (true) {
              if (!(s_1505076[i_1505084] == 95)) break L4;
                i_1505084 += 1;
              }
          } while(false);
        }
    } while(false);
    if ((s_1505076[i_1505084] == 46)) {
    var hd_1520029 = 1.0000000000000000e+00;
    i_1505084 += 1;
    L5: do {
        L6: while (true) {
        if (!(ConstSet5[s_1505076[i_1505084]] != undefined)) break L6;
          flags_1505086 = (flags_1505086 | 2);
          number_1505078[number_1505078_Idx] = ((number_1505078[number_1505078_Idx] * 1.0000000000000000e+01) + toFloat_1216659((s_1505076[i_1505084] - 48)));
          hd_1520029 = (hd_1520029 * 1.0000000000000000e+01);
          i_1505084 += 1;
          L7: do {
              L8: while (true) {
              if (!(s_1505076[i_1505084] == 95)) break L8;
                i_1505084 += 1;
              }
          } while(false);
        }
    } while(false);
    number_1505078[number_1505078_Idx] = (number_1505078[number_1505078_Idx] / hd_1520029);
    }
    
    if ((flags_1505086 == 0)) {
    result_1505081 = 0;
    break BeforeRet;
    }
    
    if ((ConstSet6[s_1505076[i_1505084]] != undefined)) {
    i_1505084 += 1;
    if ((s_1505076[i_1505084] == 43)) {
    i_1505084 += 1;
    }
    else {
    if ((s_1505076[i_1505084] == 45)) {
    esign_1505082 = -1.0000000000000000e+00;
    i_1505084 += 1;
    }
    }
    if (!((ConstSet7[s_1505076[i_1505084]] != undefined))) {
    result_1505081 = 0;
    break BeforeRet;
    }
    
    L9: do {
        L10: while (true) {
        if (!(ConstSet8[s_1505076[i_1505084]] != undefined)) break L10;
          exponent_1505085 = (((exponent_1505085 * 10) + s_1505076[i_1505084]) - 48);
          i_1505084 += 1;
          L11: do {
              L12: while (true) {
              if (!(s_1505076[i_1505084] == 95)) break L12;
                i_1505084 += 1;
              }
          } while(false);
        }
    } while(false);
    }
    
    var hd_1540029 = tenToThePowerOf_1505046(exponent_1505085);
    if ((0.0 < esign_1505082)) {
    number_1505078[number_1505078_Idx] = (number_1505078[number_1505078_Idx] * hd_1540029);
    }
    else {
      number_1505078[number_1505078_Idx] = (number_1505078[number_1505078_Idx] / hd_1540029);
    }
    
    number_1505078[number_1505078_Idx] = (number_1505078[number_1505078_Idx] * sign_1505083);
    result_1505081 = (i_1505084 - start_1505079);
  } while (false);

  return result_1505081;

}
function isObj(obj_1500062, subclass_1500063) {
  var result_1500064 = false;

  BeforeRet: do {
    var x_1500065 = obj_1500062;
    if ((x_1500065 == subclass_1500063)) {
    result_1500064 = true;
    break BeforeRet;
    }
    
    L1: do {
        L2: while (true) {
        if (!!((x_1500065 == subclass_1500063))) break L2;
          if ((x_1500065 == null)) {
          result_1500064 = false;
          break BeforeRet;
          }
          
          x_1500065 = x_1500065.base;
        }
    } while(false);
    result_1500064 = true;
    break BeforeRet;
  } while (false);

  return result_1500064;

}
function reraiseException() {
    if ((lastJSError == null)) {
    raiseException({message: makeNimstrLit("no exception to reraise"), parent: null, m_type: NTI1194657, name: null, trace: [], up: null}, "ReraiseDefect");
    }
    else {
      if ((excHandler == 0)) {
      if (isNimException_1375704()) {
      unhandledException(lastJSError);
      }
      
      }
      
      throw lastJSError;
    }
    

  
}
function eqStrings(a_1460222, b_1460223) {
        if (a_1460222 == b_1460223) return true;
    if (a_1460222 === null && b_1460223.length == 0) return true;
    if (b_1460223 === null && a_1460222.length == 0) return true;
    if ((!a_1460222) || (!b_1460223)) return false;
    var alen = a_1460222.length;
    if (alen != b_1460223.length) return false;
    for (var i = 0; i < alen; ++i)
      if (a_1460222[i] != b_1460223[i]) return false;
    return true;
  

  
}
function addInt(a_1460419, b_1460420) {
        var result = a_1460419 + b_1460420;
    checkOverflowInt(result);
    return result;
  

  
}
function mnewString(len_1460044) {
        return new Array(len_1460044);
  

  
}
function nimFloatToString(a_1460649) {
  var result_1460650 = null;

        function nimOnlyDigitsOrMinus(n) {
      return n.toString().match(/^-?\d+$/);
    }
    if (Number.isSafeInteger(a_1460649)) result_1460650 =  a_1460649+".0"
    else {
      result_1460650 = a_1460649+""
      if(nimOnlyDigitsOrMinus(result_1460650)){
        result_1460650 = a_1460649+".0"
      }
    }
  

  return result_1460650;

}
var ConstSet9 = setConstr(60, 62, 94);
var ConstSet10 = setConstr(60, 62, 94);
var ConstSet11 = setConstr(45, 43, 32);
var ConstSet12 = setConstr([48, 57]);
var ConstSet13 = setConstr([48, 57]);
var ConstSet14 = setConstr([48, 57]);
function subInt(a_1460437, b_1460438) {
        var result = a_1460437 - b_1460438;
    checkOverflowInt(result);
    return result;
  

  
}
function divInt(a_1460473, b_1460474) {
        if (b_1460474 == 0) raiseDivByZero();
    if (b_1460474 == -1 && a_1460473 == 2147483647) raiseOverflow();
    return Math.trunc(a_1460473 / b_1460474);
  

  
}
function mulInt(a_1460455, b_1460456) {
        var result = a_1460455 * b_1460456;
    checkOverflowInt(result);
    return result;
  

  
}
var ConstSet15 = setConstr([65, 90], [97, 122]);
var ConstSet16 = setConstr(46, 44);
function nimCharToStr(x_1375674) {
  var result_1375675 = [];

    result_1375675 = nimCopy(null, mnewString(1), NTI1188013);
    result_1375675[0] = x_1375674;

  return result_1375675;

}
var ConstSet17 = setConstr([65, 90]);
var ConstSet18 = setConstr([97, 122]);
var ConstSet19 = setConstr(32, 9, 11, 13, 10, 12);
function nimMax(a_1460821, b_1460822) {
    var Tmp1;

  var result_1460823 = 0;

  BeforeRet: do {
    if ((b_1460822 <= a_1460821)) {
    Tmp1 = a_1460821;
    }
    else {
    Tmp1 = b_1460822;
    }
    
    result_1460823 = Tmp1;
    break BeforeRet;
  } while (false);

  return result_1460823;

}
function nimMin(a_1460803, b_1460804) {
    var Tmp1;

  var result_1460805 = 0;

  BeforeRet: do {
    if ((a_1460803 <= b_1460804)) {
    Tmp1 = a_1460803;
    }
    else {
    Tmp1 = b_1460804;
    }
    
    result_1460805 = Tmp1;
    break BeforeRet;
  } while (false);

  return result_1460805;

}
if (!Math.trunc) {
  Math.trunc = function(v) {
    v = +v;
    if (!isFinite(v)) return v;
    return (v - v % 1) || (v < 0 ? -0 : v === 0 ? v : 0);
  };
}

function isFatPointer_1465401(ti_1465403) {
  var result_1465404 = false;

  BeforeRet: do {
    result_1465404 = !((ConstSet1[ti_1465403.base.kind] != undefined));
    break BeforeRet;
  } while (false);

  return result_1465404;

}
function nimCopyAux(dest_1470028, src_1470029, n_1470031) {
    switch (n_1470031.kind) {
    case 0:
      break;
    case 1:
            dest_1470028[n_1470031.offset] = nimCopy(dest_1470028[n_1470031.offset], src_1470029[n_1470031.offset], n_1470031.typ);
    
      break;
    case 2:
          for (var i = 0; i < n_1470031.sons.length; i++) {
      nimCopyAux(dest_1470028, src_1470029, n_1470031.sons[i]);
    }
    
      break;
    case 3:
            dest_1470028[n_1470031.offset] = nimCopy(dest_1470028[n_1470031.offset], src_1470029[n_1470031.offset], n_1470031.typ);
      for (var i = 0; i < n_1470031.sons.length; ++i) {
        nimCopyAux(dest_1470028, src_1470029, n_1470031.sons[i][1]);
      }
    
      break;
    }

  
}
function HEX2AHEX3D_10290001(x_10290005, x_10290005_Idx, y_10290006) {
    x_10290005[x_10290005_Idx] = (x_10290005[x_10290005_Idx] * y_10290006);

  
}
function add_1357211(x_1357214, x_1357214_Idx, y_1357215) {
          if (x_1357214[x_1357214_Idx] === null) { x_1357214[x_1357214_Idx] = []; }
      var off = x_1357214[x_1357214_Idx].length;
      x_1357214[x_1357214_Idx].length += y_1357215.length;
      for (var i = 0; i < y_1357215.length; ++i) {
        x_1357214[x_1357214_Idx][off+i] = y_1357215.charCodeAt(i);
      }
    

  
}
function newSeq_1455128(len_1455131) {
  var result_1455133 = [];

    result_1455133 = new Array(len_1455131); for (var i=0;i<len_1455131;++i) {result_1455133[i]=null;}
  return result_1455133;

}
function unhandledException(e_1415059) {
    var buf_1415060 = [[]];
    if (!(((e_1415059.message).length == 0))) {
    buf_1415060[0].push.apply(buf_1415060[0], makeNimstrLit("Error: unhandled exception: "));;
    buf_1415060[0].push.apply(buf_1415060[0], e_1415059.message);;
    }
    else {
    buf_1415060[0].push.apply(buf_1415060[0], makeNimstrLit("Error: unhandled exception"));;
    }
    
    buf_1415060[0].push.apply(buf_1415060[0], makeNimstrLit(" ["));;
    add_1357211(buf_1415060, 0, e_1415059.name);
    buf_1415060[0].push.apply(buf_1415060[0], makeNimstrLit("]\x0A"));;
    var cbuf_1420201 = toJSStr(buf_1415060[0]);
    framePtr = null;
      if (typeof(Error) !== "undefined") {
    throw new Error(cbuf_1420201);
  }
  else {
    throw cbuf_1420201;
  }
  

  
}
function raiseRangeError() {
    raiseException({message: makeNimstrLit("value out of range"), parent: null, m_type: NTI1194653, name: null, trace: [], up: null}, "RangeDefect");

  
}
function HEX5E_10740020(x_10740023, y_10740024) {
  var result_10740025 = [0.0];

    switch (y_10740024) {
    case 0:
      result_10740025[0] = 1.0000000000000000e+00;
      break;
    case 1:
      result_10740025[0] = x_10740023;
      break;
    case 2:
      result_10740025[0] = (x_10740023 * x_10740023);
      break;
    case 3:
      result_10740025[0] = ((x_10740023 * x_10740023) * x_10740023);
      break;
    default: 
      var colontmp__10740098 = {Field0: x_10740023, Field1: nimCopy(null, y_10740024, NTI1194404)};
      var x_10740027 = [colontmp__10740098["Field0"]];
      var y_10740028 = colontmp__10740098["Field1"];
      result_10740025[0] = 1.0000000000000000e+00;
      L1: do {
          L2: while (true) {
          if (!true) break L2;
            if (!(((y_10740028 & 1) == 0))) {
            HEX2AHEX3D_10290001(result_10740025, 0, x_10740027[0]);
            }
            
            y_10740028 = chckRange((y_10740028 >> 1), 0, 2147483647);
            if ((y_10740028 == 0)) {
            break L1;
            }
            
            HEX2AHEX3D_10290001(x_10740027, 0, x_10740027[0]);
          }
      } while(false);
      break;
    }

  return result_10740025[0];

}
function calcReductionS(meanS_10740016, sh_10740017, s0_10740018) {
  var result_10740019 = 0.0;

    result_10740019 = (Math.sqrt((HEX5E_10740020(meanS_10740016, 2) - HEX5E_10740020(sh_10740017, 2))) - s0_10740018);

  return result_10740019;

}
function raiseIndexError(i_1440047, a_1440048, b_1440049) {
    var Tmp1;

    if ((b_1440049 < a_1440048)) {
    Tmp1 = makeNimstrLit("index out of bounds, the container is empty");
    }
    else {
    Tmp1 = (makeNimstrLit("index ") || []).concat(cstrToNimstr((i_1440047)+"") || [],makeNimstrLit(" not in ") || [],cstrToNimstr((a_1440048)+"") || [],makeNimstrLit(" .. ") || [],cstrToNimstr((b_1440049)+"") || []);
    }
    
    raiseException({message: nimCopy(null, Tmp1, NTI1188013), parent: null, m_type: NTI1194649, name: null, trace: [], up: null}, "IndexDefect");

  
}
function abs_1265247(x_1265249) {
    var Tmp1;

  var result_1265250 = 0.0;

    if ((x_1265249 < 0.0)) {
    Tmp1 = -(x_1265249);
    }
    else {
    Tmp1 = x_1265249;
    }
    
    result_1265250 = Tmp1;

  return result_1265250;

}
function toFloat_1216659(i_1216661) {
  var result_1216662 = 0.0;

    result_1216662 = i_1216661;

  return result_1216662;

}
function tenToThePowerOf_1505046(b_1505048) {
  var result_1505049 = 0.0;

    var b_1505050 = b_1505048;
    var a_1505051 = 1.0000000000000000e+01;
    result_1505049 = 1.0000000000000000e+00;
    L1: do {
        L2: while (true) {
        if (!true) break L2;
          if (((b_1505050 & 1) == 1)) {
          result_1505049 = (result_1505049 * a_1505051);
          }
          
          b_1505050 = (b_1505050 >> 1);
          if ((b_1505050 == 0)) {
          break L1;
          }
          
          a_1505051 = (a_1505051 * a_1505051);
        }
    } while(false);

  return result_1505049;

}
function npuParseFloat(s_2060023, number_2060025, number_2060025_Idx, start_2060026) {
  var result_2060028 = 0;

    var bf_2060029 = [0.0];
    result_2060028 = nimParseBiggestFloat(s_2060023, bf_2060029, 0, start_2060026);
    if (!((result_2060028 == 0))) {
    number_2060025[number_2060025_Idx] = bf_2060029[0];
    }
    

  return result_2060028;

}
function nsuParseFloat(s_9800017) {
      var Tmp1;

  var result_9800018 = [0.0];

    result_9800018[0] = 0.0;
    var L_9800020 = npuParseFloat(s_9800017, result_9800018, 0, 0);
      if (!((L_9800020 == (s_9800017).length))) Tmp1 = true; else {        Tmp1 = (L_9800020 == 0);      }    if (Tmp1) {
    raiseException({message: (makeNimstrLit("invalid float: ") || []).concat(s_9800017 || []), parent: null, m_type: NTI1194643, name: null, trace: [], up: null}, "ValueError");
    }
    

  return result_9800018[0];

}
function floatVal_10726018(id_10726020) {
  var result_10726021 = 0.0;

    result_10726021 = nsuParseFloat(cstrToNimstr(document.getElementById(id_10726020).value));

  return result_10726021;

}
function isNimException_1375704() {
    return lastJSError && lastJSError.m_type;

  
}
function setDiffLe2mm_10735014(idA_10735016, idB_10735017, idOut_10735018) {
    var Tmp2;
    var Tmp3;

  BeforeRet: do {
++excHandler;
    Tmp2 = framePtr;
    try {
    if ((abs_1265247((floatVal_10726018(idA_10735016) - floatVal_10726018(idB_10735017))) <= 2.0000000000000001e-04)) {
    Tmp3 = makeNimstrLit("&#9989;");
    }
    else {
    Tmp3 = makeNimstrLit("&#10060;");
    }
    
    document.getElementById(idOut_10735018).innerHTML = toJSStr(Tmp3);
--excHandler;
} catch (EXC) {
 var prevJSError = lastJSError;
 lastJSError = EXC;
 --excHandler;
    framePtr = Tmp2;
    if (lastJSError && (isObj(lastJSError.m_type, NTI1194643))) {
    break BeforeRet;
    }
    else {
    	reraiseException();
    }
    lastJSError = prevJSError;
    } finally {
    framePtr = Tmp2;
    }
  } while (false);

  
}
function raiseOverflow() {
    raiseException({message: makeNimstrLit("over- or underflow"), parent: null, m_type: NTI1194637, name: null, trace: [], up: null}, "OverflowDefect");

  
}
function checkOverflowInt(a_1460403) {
        if (a_1460403 > 2147483647 || a_1460403 < -2147483648) raiseOverflow();
  

  
}
function find_9940009(a_9940013, item_9940014) {
  var result_9940015 = 0;

  BeforeRet: do {
    result_9940015 = 0;
    L1: do {
      var i_9940022 = null;
      var i_9940022_Idx = 0;
      var i_10850142 = 0;
      L2: do {
          L3: while (true) {
          if (!(i_10850142 < (a_9940013).length)) break L3;
            i_9940022 = a_9940013; i_9940022_Idx = chckIndx(i_10850142, 0, (a_9940013).length-1);
            if (eqStrings(i_9940022[i_9940022_Idx], item_9940014)) {
            break BeforeRet;
            }
            
            result_9940015 = addInt(result_9940015, 1);
            i_10850142 = addInt(i_10850142, 1);
          }
      } while(false);
    } while(false);
    result_9940015 = -1;
  } while (false);

  return result_9940015;

}
function contains_9940002(a_9940006, item_9940007) {
  var result_9940008 = false;

  BeforeRet: do {
    result_9940008 = (0 <= find_9940009(a_9940006, item_9940007));
    break BeforeRet;
  } while (false);

  return result_9940008;

}
function HEX2BHEX3D_10290021(x_10290025, x_10290025_Idx, y_10290026) {
    x_10290025[x_10290025_Idx] = (x_10290025[x_10290025_Idx] + y_10290026);

  
}
function push_10716069(s_10716072, x_10716073) {
    if ((s_10716072.n == 0)) {
    s_10716072.min = x_10716073;
    }
    
    s_10716072.n += 1;
    if ((x_10716073 < s_10716072.min)) {
    s_10716072.min = x_10716073;
    }
    
    if ((s_10716072.max < x_10716073)) {
    s_10716072.max = x_10716073;
    }
    
    HEX2BHEX3D_10290021(s_10716072, "sum", x_10716073);
    var n_10720008 = toFloat_1216659(s_10716072.n);
    var delta_10720009 = (x_10716073 - s_10716072.mom1);
    var delta_n_10720010 = (delta_10720009 / toFloat_1216659(s_10716072.n));
    var delta_n2_10720011 = (delta_n_10720010 * delta_n_10720010);
    var term1_10720012 = ((delta_10720009 * delta_n_10720010) * toFloat_1216659((s_10716072.n - 1)));
    HEX2BHEX3D_10290021(s_10716072, "mom4", ((((term1_10720012 * delta_n2_10720011) * (((n_10720008 * n_10720008) - (3.0000000000000000e+00 * n_10720008)) + 3.0000000000000000e+00)) + ((6.0000000000000000e+00 * delta_n2_10720011) * s_10716072.mom2)) - ((4.0000000000000000e+00 * delta_n_10720010) * s_10716072.mom3)));
    HEX2BHEX3D_10290021(s_10716072, "mom3", (((term1_10720012 * delta_n_10720010) * (n_10720008 - 2.0000000000000000e+00)) - ((3.0000000000000000e+00 * delta_n_10720010) * s_10716072.mom2)));
    HEX2BHEX3D_10290021(s_10716072, "mom2", term1_10720012);
    HEX2BHEX3D_10290021(s_10716072, "mom1", delta_n_10720010);

  
}
function push_10765027(s_10765030, x_10765032) {
    L1: do {
      var val_10765065 = null;
      var val_10765065_Idx = 0;
      var i_10850147 = 0;
      L2: do {
          L3: while (true) {
          if (!(i_10850147 < (x_10765032).length)) break L3;
            val_10765065 = x_10765032; val_10765065_Idx = i_10850147;
            push_10716069(s_10765030, val_10765065[val_10765065_Idx]);
            i_10850147 += 1;
          }
      } while(false);
    } while(false);

  
}
function mean_10720083(s_10720085) {
  var result_10720086 = 0.0;

    result_10720086 = s_10720085.mom1;

  return result_10720086;

}
function mean_10765020(x_10765024) {
  var result_10765025 = 0.0;

    var rs_10765026 = [({n: 0, min: 0.0, max: 0.0, sum: 0.0, mom1: 0.0, mom2: 0.0, mom3: 0.0, mom4: 0.0})];
    push_10765027(rs_10765026[0], x_10765024);
    result_10765025 = mean_10720083(rs_10765026[0]);

  return result_10765025;

}
function raiseDivByZero() {
    raiseException({message: makeNimstrLit("division by zero"), parent: null, m_type: NTI1194635, name: null, trace: [], up: null}, "DivByZeroDefect");

  
}
function parseSaturatedNatural_2015017(s_2015019, b_2015021, b_2015021_Idx, start_2015022) {
      var Tmp1;
          var Tmp4;

  var result_2015024 = 0;

    var i_2015025 = start_2015022;
    if (((i_2015025 < (s_2015019).length) && (s_2015019[chckIndx(i_2015025, 0, (s_2015019).length-1)] == 43))) {
    i_2015025 = addInt(i_2015025, 1);
    }
    
      if (!(i_2015025 < (s_2015019).length)) Tmp1 = false; else {        Tmp1 = (ConstSet13[s_2015019[chckIndx(i_2015025, 0, (s_2015019).length-1)]] != undefined);      }    if (Tmp1) {
    b_2015021[b_2015021_Idx] = 0;
    L2: do {
        L3: while (true) {
          if (!(i_2015025 < (s_2015019).length)) Tmp4 = false; else {            Tmp4 = (ConstSet14[s_2015019[chckIndx(i_2015025, 0, (s_2015019).length-1)]] != undefined);          }        if (!Tmp4) break L3;
          var c_2025016 = subInt(s_2015019[chckIndx(i_2015025, 0, (s_2015019).length-1)], 48);
          if ((b_2015021[b_2015021_Idx] <= divInt(subInt(2147483647, c_2025016), 10))) {
          b_2015021[b_2015021_Idx] = addInt(mulInt(b_2015021[b_2015021_Idx], 10), c_2025016);
          }
          else {
            b_2015021[b_2015021_Idx] = 2147483647;
          }
          
          i_2015025 = addInt(i_2015025, 1);
          L5: do {
              L6: while (true) {
              if (!((i_2015025 < (s_2015019).length) && (s_2015019[chckIndx(i_2015025, 0, (s_2015019).length-1)] == 95))) break L6;
                i_2015025 = addInt(i_2015025, 1);
              }
          } while(false);
        }
    } while(false);
    result_2015024 = subInt(i_2015025, start_2015022);
    }
    

  return result_2015024;

}
function HEX5BHEX5D_5890068(s_5890072, x_5890074) {
  var result_5890075 = [];

    var a_5890201 = x_5890074.a;
    var L_5890401 = addInt(subInt(subInt((s_5890072).length, x_5890074.b), a_5890201), 1);
    result_5890075 = nimCopy(null, mnewString(chckRange(L_5890401, 0, 2147483647)), NTI1188013);
    L1: do {
      var i_5890409 = 0;
      var i_10850164 = 0;
      L2: do {
          L3: while (true) {
          if (!(i_10850164 < L_5890401)) break L3;
            i_5890409 = i_10850164;
            result_5890075[chckIndx(i_5890409, 0, (result_5890075).length-1)] = s_5890072[chckIndx(addInt(i_5890409, a_5890201), 0, (s_5890072).length-1)];
            i_10850164 = addInt(i_10850164, 1);
          }
      } while(false);
    } while(false);

  return result_5890075;

}
function HEX2EHEX2E_5890001(a_5890006, b_5890008) {
  var result_5890014 = ({a: 0, b: 0});

    nimCopy(result_5890014, {a: a_5890006, b: b_5890008}, NTI5890011);

  return result_5890014;

}
function parseStandardFormatSpecifier_10600322(s_10600324, start_10600325, ignoreUnknownSuffix_10600327) {
      var Tmp1;
      var Tmp2;
      var Tmp3;

  var result_10600328 = ({fill: 0, align: 0, sign: 0, alternateForm: false, padWithZero: false, minimumWidth: 0, precision: 0, typ: 0, endPosition: 0});

    result_10600328.fill = 32;
    result_10600328.align = 0;
    result_10600328.sign = 45;
    var i_10600331 = start_10600325;
    if (((addInt(i_10600331, 1) < (s_10600324).length) && (ConstSet9[s_10600324[chckIndx(addInt(i_10600331, 1), 0, (s_10600324).length-1)]] != undefined))) {
    result_10600328.fill = s_10600324[chckIndx(i_10600331, 0, (s_10600324).length-1)];
    result_10600328.align = s_10600324[chckIndx(addInt(i_10600331, 1), 0, (s_10600324).length-1)];
    i_10600331 = addInt(i_10600331, 2);
    }
    else {
    if (((i_10600331 < (s_10600324).length) && (ConstSet10[s_10600324[chckIndx(i_10600331, 0, (s_10600324).length-1)]] != undefined))) {
    result_10600328.align = s_10600324[chckIndx(i_10600331, 0, (s_10600324).length-1)];
    i_10600331 = addInt(i_10600331, 1);
    }
    }
    if (((i_10600331 < (s_10600324).length) && (ConstSet11[s_10600324[chckIndx(i_10600331, 0, (s_10600324).length-1)]] != undefined))) {
    result_10600328.sign = s_10600324[chckIndx(i_10600331, 0, (s_10600324).length-1)];
    i_10600331 = addInt(i_10600331, 1);
    }
    
    if (((i_10600331 < (s_10600324).length) && (s_10600324[chckIndx(i_10600331, 0, (s_10600324).length-1)] == 35))) {
    result_10600328.alternateForm = true;
    i_10600331 = addInt(i_10600331, 1);
    }
    
      if (!((addInt(i_10600331, 1) < (s_10600324).length) && (s_10600324[chckIndx(i_10600331, 0, (s_10600324).length-1)] == 48))) Tmp1 = false; else {        Tmp1 = (ConstSet12[s_10600324[chckIndx(addInt(i_10600331, 1), 0, (s_10600324).length-1)]] != undefined);      }    if (Tmp1) {
    result_10600328.padWithZero = true;
    i_10600331 = addInt(i_10600331, 1);
    }
    
    var parsedLength_10620015 = parseSaturatedNatural_2015017(s_10600324, result_10600328, "minimumWidth", i_10600331);
    i_10600331 = addInt(i_10600331, parsedLength_10620015);
    if (((i_10600331 < (s_10600324).length) && (s_10600324[chckIndx(i_10600331, 0, (s_10600324).length-1)] == 46))) {
    i_10600331 = addInt(i_10600331, 1);
    var parsedLengthB_10620029 = parseSaturatedNatural_2015017(s_10600324, result_10600328, "precision", i_10600331);
    i_10600331 = addInt(i_10600331, parsedLengthB_10620029);
    }
    else {
      result_10600328.precision = -1;
    }
    
      if (!(i_10600331 < (s_10600324).length)) Tmp2 = false; else {        Tmp2 = (ConstSet15[s_10600324[chckIndx(i_10600331, 0, (s_10600324).length-1)]] != undefined);      }    if (Tmp2) {
    result_10600328.typ = s_10600324[chckIndx(i_10600331, 0, (s_10600324).length-1)];
    i_10600331 = addInt(i_10600331, 1);
    }
    
    result_10600328.endPosition = i_10600331;
      if (!!((i_10600331 == (s_10600324).length))) Tmp3 = false; else {        Tmp3 = !(ignoreUnknownSuffix_10600327);      }    if (Tmp3) {
    raiseException({message: (makeNimstrLit("invalid format string, cannot parse: ") || []).concat(HEX5BHEX5D_5890068(s_10600324, HEX2EHEX2E_5890001(i_10600331, 1)) || []), parent: null, m_type: NTI1194643, name: null, trace: [], up: null}, "ValueError");
    }
    

  return result_10600328;

}
function nsuformatBiggestFloat(f_10255221, format_10255222, precision_10255227, decimalSep_10255228) {
  var result_10255229 = [];

    var precision_10255401 = precision_10255227;
    if ((precision_10255401 == -1)) {
    precision_10255401 = 6;
    }
    
    var res_10255402 = null;
    switch (format_10255222) {
    case 0:
      res_10255402 = f_10255221.toString();
      break;
    case 1:
      res_10255402 = f_10255221.toFixed(precision_10255401);
      break;
    case 2:
      res_10255402 = f_10255221.toExponential(precision_10255401);
      break;
    }
    result_10255229 = nimCopy(null, cstrToNimstr(res_10255402), NTI1188013);
    if (((1.0000000000000000e+00 / f_10255221) == -Infinity)) {
    result_10255229 = nimCopy(null, (makeNimstrLit("-") || []).concat(cstrToNimstr(res_10255402) || []), NTI1188013);
    }
    
    L1: do {
      var i_10255410 = 0;
      var colontmp__10850169 = 0;
      colontmp__10850169 = (result_10255229).length;
      var i_10850170 = 0;
      L2: do {
          L3: while (true) {
          if (!(i_10850170 < colontmp__10850169)) break L3;
            i_10255410 = i_10850170;
            if ((ConstSet16[result_10255229[chckIndx(i_10255410, 0, (result_10255229).length-1)]] != undefined)) {
            result_10255229[chckIndx(i_10255410, 0, (result_10255229).length-1)] = decimalSep_10255228;
            }
            
            i_10850170 = addInt(i_10850170, 1);
          }
      } while(false);
    } while(false);

  return result_10255229;

}
function insert_1565401(x_1565404, x_1565404_Idx, item_1565405, i_1565406) {
    var xl_1565407 = (x_1565404[x_1565404_Idx]).length;
    (x_1565404[x_1565404_Idx].length = chckRange(addInt(xl_1565407, (item_1565405).length), 0, 2147483647));
    var j_1565408 = subInt(xl_1565407, 1);
    L1: do {
        L2: while (true) {
        if (!(i_1565406 <= j_1565408)) break L2;
          x_1565404[x_1565404_Idx][chckIndx(addInt(j_1565408, (item_1565405).length), 0, (x_1565404[x_1565404_Idx]).length-1)] = x_1565404[x_1565404_Idx][chckIndx(j_1565408, 0, (x_1565404[x_1565404_Idx]).length-1)];
          j_1565408 = subInt(j_1565408, 1);
        }
    } while(false);
    j_1565408 = 0;
    L3: do {
        L4: while (true) {
        if (!(j_1565408 < (item_1565405).length)) break L4;
          x_1565404[x_1565404_Idx][chckIndx(addInt(j_1565408, i_1565406), 0, (x_1565404[x_1565404_Idx]).length-1)] = item_1565405[chckIndx(j_1565408, 0, (item_1565405).length-1)];
          j_1565408 = addInt(j_1565408, 1);
        }
    } while(false);

  
}
function nsuRepeatChar(c_9940124, count_9940125) {
  var result_9940126 = [];

    result_9940126 = nimCopy(null, mnewString(count_9940125), NTI1188013);
    L1: do {
      var i_9940135 = 0;
      var colontmp__10850175 = 0;
      colontmp__10850175 = subInt(count_9940125, 1);
      var res_10850176 = 0;
      L2: do {
          L3: while (true) {
          if (!(res_10850176 <= colontmp__10850175)) break L3;
            i_9940135 = res_10850176;
            result_9940126[chckIndx(i_9940135, 0, (result_9940126).length-1)] = c_9940124;
            res_10850176 = addInt(res_10850176, 1);
          }
      } while(false);
    } while(false);

  return result_9940126;

}
function validateUtf8_2805244(s_2805246) {
            var Tmp3;
            var Tmp4;
            var Tmp5;
            var Tmp6;
            var Tmp7;
            var Tmp8;

  var result_2805247 = 0;

  BeforeRet: do {
    var i_2805249 = 0;
    var L_2805250 = (s_2805246).length;
    L1: do {
        L2: while (true) {
        if (!(i_2805249 < L_2805250)) break L2;
          if ((s_2805246[chckIndx(i_2805249, 0, (s_2805246).length-1)] <= 127)) {
          i_2805249 = addInt(i_2805249, 1);
          }
          else {
          if ((((s_2805246[chckIndx(i_2805249, 0, (s_2805246).length-1)] >>> 0) >>> 5) == 6)) {
          if ((s_2805246[chckIndx(i_2805249, 0, (s_2805246).length-1)] < 194)) {
          result_2805247 = i_2805249;
          break BeforeRet;
          }
          
            if (!(addInt(i_2805249, 1) < L_2805250)) Tmp3 = false; else {              Tmp3 = (((s_2805246[chckIndx(addInt(i_2805249, 1), 0, (s_2805246).length-1)] >>> 0) >>> 6) == 2);            }          if (Tmp3) {
          i_2805249 = addInt(i_2805249, 2);
          }
          else {
            result_2805247 = i_2805249;
            break BeforeRet;
          }
          
          }
          else {
          if ((((s_2805246[chckIndx(i_2805249, 0, (s_2805246).length-1)] >>> 0) >>> 4) == 14)) {
            if (!(addInt(i_2805249, 2) < L_2805250)) Tmp5 = false; else {              Tmp5 = (((s_2805246[chckIndx(addInt(i_2805249, 1), 0, (s_2805246).length-1)] >>> 0) >>> 6) == 2);            }            if (!Tmp5) Tmp4 = false; else {              Tmp4 = (((s_2805246[chckIndx(addInt(i_2805249, 2), 0, (s_2805246).length-1)] >>> 0) >>> 6) == 2);            }          if (Tmp4) {
          i_2805249 = addInt(i_2805249, 3);
          }
          else {
            result_2805247 = i_2805249;
            break BeforeRet;
          }
          
          }
          else {
          if ((((s_2805246[chckIndx(i_2805249, 0, (s_2805246).length-1)] >>> 0) >>> 3) == 30)) {
            if (!(addInt(i_2805249, 3) < L_2805250)) Tmp8 = false; else {              Tmp8 = (((s_2805246[chckIndx(addInt(i_2805249, 1), 0, (s_2805246).length-1)] >>> 0) >>> 6) == 2);            }            if (!Tmp8) Tmp7 = false; else {              Tmp7 = (((s_2805246[chckIndx(addInt(i_2805249, 2), 0, (s_2805246).length-1)] >>> 0) >>> 6) == 2);            }            if (!Tmp7) Tmp6 = false; else {              Tmp6 = (((s_2805246[chckIndx(addInt(i_2805249, 3), 0, (s_2805246).length-1)] >>> 0) >>> 6) == 2);            }          if (Tmp6) {
          i_2805249 = addInt(i_2805249, 4);
          }
          else {
            result_2805247 = i_2805249;
            break BeforeRet;
          }
          
          }
          else {
            result_2805247 = i_2805249;
            break BeforeRet;
          }
          }}}
        }
    } while(false);
    result_2805247 = -1;
    break BeforeRet;
  } while (false);

  return result_2805247;

}
function nucruneLen(s_2563025) {
  var result_2563026 = 0;

    result_2563026 = 0;
    var i_2563028 = 0;
    L1: do {
        L2: while (true) {
        if (!(i_2563028 < (s_2563025).length)) break L2;
          if ((s_2563025[chckIndx(i_2563028, 0, (s_2563025).length-1)] <= 127)) {
          i_2563028 = addInt(i_2563028, 1);
          }
          else {
          if ((((s_2563025[chckIndx(i_2563028, 0, (s_2563025).length-1)] >>> 0) >>> 5) == 6)) {
          i_2563028 = addInt(i_2563028, 2);
          }
          else {
          if ((((s_2563025[chckIndx(i_2563028, 0, (s_2563025).length-1)] >>> 0) >>> 4) == 14)) {
          i_2563028 = addInt(i_2563028, 3);
          }
          else {
          if ((((s_2563025[chckIndx(i_2563028, 0, (s_2563025).length-1)] >>> 0) >>> 3) == 30)) {
          i_2563028 = addInt(i_2563028, 4);
          }
          else {
          if ((((s_2563025[chckIndx(i_2563028, 0, (s_2563025).length-1)] >>> 0) >>> 2) == 62)) {
          i_2563028 = addInt(i_2563028, 5);
          }
          else {
          if ((((s_2563025[chckIndx(i_2563028, 0, (s_2563025).length-1)] >>> 0) >>> 1) == 126)) {
          i_2563028 = addInt(i_2563028, 6);
          }
          else {
          i_2563028 = addInt(i_2563028, 1);
          }
          }}}}}
          result_2563026 = addInt(result_2563026, 1);
        }
    } while(false);

  return result_2563026;

}
function alignString_10600222(s_10600224, minimumWidth_10600225, align_10600226, fill_10600227) {
      var Tmp1;

  var result_10600228 = [];

    if ((minimumWidth_10600225 == 0)) {
    result_10600228 = nimCopy(null, s_10600224, NTI1188013);
    }
    else {
      if ((validateUtf8_2805244(s_10600224) == -1)) {
      Tmp1 = nucruneLen(s_10600224);
      }
      else {
      Tmp1 = (s_10600224).length;
      }
      
      var sRuneLen_10600229 = Tmp1;
      var toFill_10600230 = subInt(minimumWidth_10600225, sRuneLen_10600229);
      if ((toFill_10600230 <= 0)) {
      result_10600228 = nimCopy(null, s_10600224, NTI1188013);
      }
      else {
      if (((align_10600226 == 60) || (align_10600226 == 0))) {
      result_10600228 = nimCopy(null, (s_10600224 || []).concat(nsuRepeatChar(fill_10600227, chckRange(toFill_10600230, 0, 2147483647)) || []), NTI1188013);
      }
      else {
      if ((align_10600226 == 94)) {
      var half_10600231 = divInt(toFill_10600230, 2);
      result_10600228 = nimCopy(null, (nsuRepeatChar(fill_10600227, chckRange(half_10600231, 0, 2147483647)) || []).concat(s_10600224 || [],nsuRepeatChar(fill_10600227, chckRange(subInt(toFill_10600230, half_10600231), 0, 2147483647)) || []), NTI1188013);
      }
      else {
        result_10600228 = nimCopy(null, (nsuRepeatChar(fill_10600227, chckRange(toFill_10600230, 0, 2147483647)) || []).concat(s_10600224 || []), NTI1188013);
      }
      }}
    }
    

  return result_10600228;

}
function nsuToUpperAsciiChar(c_9430016) {
  var result_9430017 = 0;

    if ((ConstSet18[c_9430016] != undefined)) {
    result_9430017 = chckRange(subInt(c_9430016, 32), 0, 255);
    }
    else {
      result_9430017 = c_9430016;
    }
    

  return result_9430017;

}
function nsuToUpperAsciiStr(s_9435037) {
  var result_9435038 = [];

    result_9435038 = nimCopy(null, mnewString(chckRange((s_9435037).length, 0, 2147483647)), NTI1188013);
    L1: do {
      var iHEX60gensym11_9440009 = 0;
      var colontmp__10850201 = 0;
      colontmp__10850201 = subInt((s_9435037).length, 1);
      var res_10850202 = 0;
      L2: do {
          L3: while (true) {
          if (!(res_10850202 <= colontmp__10850201)) break L3;
            iHEX60gensym11_9440009 = res_10850202;
            result_9435038[chckIndx(iHEX60gensym11_9440009, 0, (result_9435038).length-1)] = nsuToUpperAsciiChar(s_9435037[chckIndx(iHEX60gensym11_9440009, 0, (s_9435037).length-1)]);
            res_10850202 = addInt(res_10850202, 1);
          }
      } while(false);
    } while(false);

  return result_9435038;

}
function formatValue_10775001(result_10775004, result_10775004_Idx, value_10775005, specifier_10775006) {
    var Tmp1;

  BeforeRet: do {
    if (((specifier_10775006).length == 0)) {
    result_10775004[result_10775004_Idx].push.apply(result_10775004[result_10775004_Idx], cstrToNimstr(nimFloatToString(value_10775005)));;
    break BeforeRet;
    }
    
    var spec_10775007 = parseStandardFormatSpecifier_10600322(specifier_10775006, 0, false);
    var fmode_10775008 = 0;
    switch (spec_10775007.typ) {
    case 101:
    case 69:
      fmode_10775008 = 2;
      break;
    case 102:
    case 70:
      fmode_10775008 = 1;
      break;
    case 103:
    case 71:
      fmode_10775008 = 0;
      break;
    case 0:
      break;
    default: 
      raiseException({message: (makeNimstrLit("invalid type in format string for number, expected one  of \'e\', \'E\', \'f\', \'F\', \'g\', \'G\' but got: ") || []).concat([spec_10775007.typ]), parent: null, m_type: NTI1194643, name: null, trace: [], up: null}, "ValueError");
      break;
    }
    var f_10780002 = [nsuformatBiggestFloat(value_10775005, fmode_10775008, chckRange(spec_10775007.precision, -1, 32), 46)];
    var sign_10780003 = false;
    if ((0.0 <= value_10775005)) {
    if (!((spec_10775007.sign == 45))) {
    sign_10780003 = true;
    if ((value_10775005 == 0.0)) {
    if (((1.0000000000000000e+00 / value_10775005) == Infinity)) {
    insert_1565401(f_10780002, 0, nimCharToStr(spec_10775007.sign), 0);
    }
    
    }
    else {
    insert_1565401(f_10780002, 0, nimCharToStr(spec_10775007.sign), 0);
    }
    
    }
    
    }
    else {
      sign_10780003 = true;
    }
    
    if (spec_10775007.padWithZero) {
    var signStr_10780006 = [];
    if (sign_10780003) {
    signStr_10780006 = nimCopy(null, nimCharToStr(f_10780002[0][chckIndx(0, 0, (f_10780002[0]).length-1)]), NTI1188013);
    f_10780002[0] = nimCopy(null, HEX5BHEX5D_5890068(f_10780002[0], HEX2EHEX2E_5890001(1, 1)), NTI1188013);
    }
    
    var toFill_10790040 = subInt(subInt(spec_10775007.minimumWidth, (f_10780002[0]).length), (sign_10780003 ? 1:0));
    if ((0 < toFill_10790040)) {
    f_10780002[0] = nimCopy(null, (nsuRepeatChar(48, chckRange(toFill_10790040, 0, 2147483647)) || []).concat(f_10780002[0] || []), NTI1188013);
    }
    
    if (sign_10780003) {
    f_10780002[0] = nimCopy(null, (signStr_10780006 || []).concat(f_10780002[0] || []), NTI1188013);
    }
    
    }
    
    if ((spec_10775007.align == 0)) {
    Tmp1 = 62;
    }
    else {
    Tmp1 = spec_10775007.align;
    }
    
    var align_10790041 = Tmp1;
    var res_10790042 = alignString_10600222(f_10780002[0], spec_10775007.minimumWidth, align_10790041, spec_10775007.fill);
    if ((ConstSet17[spec_10775007.typ] != undefined)) {
    result_10775004[result_10775004_Idx].push.apply(result_10775004[result_10775004_Idx], nsuToUpperAsciiStr(res_10790042));;
    }
    else {
    result_10775004[result_10775004_Idx].push.apply(result_10775004[result_10775004_Idx], res_10790042);;
    }
    
  } while (false);

  
}
function sysFatal_1305418(message_1305422) {
    raiseException({message: nimCopy(null, message_1305422, NTI1188013), m_type: NTI1194641, parent: null, name: null, trace: [], up: null}, "AssertionDefect");

  
}
function raiseAssert_1305414(msg_1305416) {
    sysFatal_1305418(msg_1305416);

  
}
function failedAssertImpl_1305480(msg_1305482) {
    raiseAssert_1305414(msg_1305482);

  
}
function newSeq_10820004(len_10820007) {
  var result_10820009 = [];

    result_10820009 = new Array(len_10820007); for (var i=0;i<len_10820007;++i) {result_10820009[i]=0.0;}
  return result_10820009;

}
function substr_1571022(s_1571024, first_1571025, last_1571026) {
  var result_1571027 = [];

    var first_1571028 = nimMax(first_1571025, 0);
    var L_1571030 = nimMax(addInt(subInt(nimMin(last_1571026, (s_1571024).length - 1), first_1571028), 1), 0);
    result_1571027 = nimCopy(null, mnewString(chckRange(L_1571030, 0, 2147483647)), NTI1188013);
    L1: do {
      var i_1571039 = 0;
      var colontmp__10850210 = 0;
      colontmp__10850210 = subInt(L_1571030, 1);
      var res_10850211 = 0;
      L2: do {
          L3: while (true) {
          if (!(res_10850211 <= colontmp__10850210)) break L3;
            i_1571039 = res_10850211;
            result_1571027[chckIndx(i_1571039, 0, (result_1571027).length-1)] = s_1571024[chckIndx(addInt(i_1571039, first_1571028), 0, (s_1571024).length-1)];
            res_10850211 = addInt(res_10850211, 1);
          }
      } while(false);
    } while(false);

  return result_1571027;

}
function floatHtml_10730044(id_10730046) {
  var result_10730047 = 0.0;

    result_10730047 = nsuParseFloat(cstrToNimstr(document.getElementById(id_10730046).innerHTML));

  return result_10730047;

}
function runeLenAt_2563127(s_2563129, i_2563130) {
  var result_2563131 = 0;

    if ((s_2563129[chckIndx(i_2563130, 0, (s_2563129).length-1)] <= 127)) {
    result_2563131 = 1;
    }
    else {
    if ((((s_2563129[chckIndx(i_2563130, 0, (s_2563129).length-1)] >>> 0) >>> 5) == 6)) {
    result_2563131 = 2;
    }
    else {
    if ((((s_2563129[chckIndx(i_2563130, 0, (s_2563129).length-1)] >>> 0) >>> 4) == 14)) {
    result_2563131 = 3;
    }
    else {
    if ((((s_2563129[chckIndx(i_2563130, 0, (s_2563129).length-1)] >>> 0) >>> 3) == 30)) {
    result_2563131 = 4;
    }
    else {
    if ((((s_2563129[chckIndx(i_2563130, 0, (s_2563129).length-1)] >>> 0) >>> 2) == 62)) {
    result_2563131 = 5;
    }
    else {
    if ((((s_2563129[chckIndx(i_2563130, 0, (s_2563129).length-1)] >>> 0) >>> 1) == 126)) {
    result_2563131 = 6;
    }
    else {
      result_2563131 = 1;
    }
    }}}}}

  return result_2563131;

}
function runeOffset_3185259(s_3185261, pos_3185262, start_3185263) {
  var result_3185264 = 0;

  BeforeRet: do {
    var i_3185266 = 0;
    var o_3185267 = start_3185263;
    L1: do {
        L2: while (true) {
        if (!(i_3185266 < pos_3185262)) break L2;
          o_3185267 = addInt(o_3185267, chckRange(runeLenAt_2563127(s_3185261, o_3185267), 0, 2147483647));
          if (((s_3185261).length <= o_3185267)) {
          result_3185264 = -1;
          break BeforeRet;
          }
          
          i_3185266 = addInt(i_3185266, 1);
        }
    } while(false);
    result_3185264 = o_3185267;
    break BeforeRet;
  } while (false);

  return result_3185264;

}
function formatValue_10645080(result_10645083, result_10645083_Idx, value_10645084, specifier_10645085) {
    var spec_10645086 = parseStandardFormatSpecifier_10600322(specifier_10645085, 0, false);
    var value_10645087 = nimCopy(null, value_10645084, NTI1188013);
    switch (spec_10645086.typ) {
    case 115:
    case 0:
      break;
    default: 
      raiseException({message: (makeNimstrLit("invalid type in format string for string, expected \'s\', but got ") || []).concat([spec_10645086.typ]), parent: null, m_type: NTI1194643, name: null, trace: [], up: null}, "ValueError");
      break;
    }
    if (!((spec_10645086.precision == -1))) {
    if ((spec_10645086.precision < nucruneLen(value_10645087))) {
    (value_10645087.length = chckRange(runeOffset_3185259(value_10645087, chckRange(spec_10645086.precision, 0, 2147483647), 0), 0, 2147483647));
    }
    
    }
    
    result_10645083[result_10645083_Idx].push.apply(result_10645083[result_10645083_Idx], alignString_10600222(value_10645087, spec_10645086.minimumWidth, spec_10645086.align, spec_10645086.fill));;

  
}
function onLoad() {
                    var Tmp7;
                            var Tmp11;
                            function HEX3Aanonymous_10755001(idPart_10755003, i_10755004, idbase_10755005, idStart_10755006, idEnd_10755007, idDiff_10755008, idReduced_10755009, idArp_10755010, idArp2_10755011) {
                                idStart_10755006 = nimCopy(null, idStart_10755006, NTI1188013);
                                idEnd_10755007 = nimCopy(null, idEnd_10755007, NTI1188013);
                                idDiff_10755008 = nimCopy(null, idDiff_10755008, NTI1188013);
                                idPart_10755003 = nimCopy(null, idPart_10755003, NTI1188013);
                                idReduced_10755009 = nimCopy(null, idReduced_10755009, NTI1188013);
                                idbase_10755005 = nimCopy(null, idbase_10755005, NTI1188013);
                                idArp_10755010 = nimCopy(null, idArp_10755010, NTI1188013);
                                idArp2_10755011 = nimCopy(null, idArp2_10755011, NTI1188013);
                                function HEX3Aanonymous_10760001(ev_10760003) {
                                    var Tmp2;

                                  BeforeRet: do {
++excHandler;
                                    Tmp2 = framePtr;
                                    try {
                                    setDiffLe2mm_10735014(toJSStr(idStart_10755006), toJSStr(idEnd_10755007), toJSStr(idDiff_10755008));
                                    if (contains_9940002([makeNimstrLit("s1"), makeNimstrLit("s2")], idPart_10755003)) {
                                    var redV_10765108 = calcReductionS(mean_10765020([floatVal_10726018(toJSStr(idStart_10755006)), floatVal_10726018(toJSStr(idEnd_10755007))]), floatVal_10726018("sH"), floatVal_10726018("s0"));
                                    var fmtRes_10770004 = [mnewString(0)];
                                    formatValue_10775001(fmtRes_10770004, 0, redV_10765108, makeNimstrLit(".3f"));
                                    document.getElementById(toJSStr(idReduced_10755009)).innerHTML = toJSStr(fmtRes_10770004[0]);
                                    }
                                    else {
                                      if (!(eqStrings(idPart_10755003, makeNimstrLit("v")))) {
                                      failedAssertImpl_1305480(makeNimstrLit("report_js.nim(52, 24) `idPart == \"v\"` "));
                                      }
                                      
                                      var redV_10800209 = (mean_10765020([floatVal_10726018(toJSStr(idStart_10755006)), floatVal_10726018(toJSStr(idEnd_10755007))]) + floatVal_10726018("v0"));
                                      var fmtRes_10805001 = [mnewString(0)];
                                      formatValue_10775001(fmtRes_10805001, 0, redV_10800209, makeNimstrLit(".3f"));
                                      document.getElementById(toJSStr(idReduced_10755009)).innerHTML = toJSStr(fmtRes_10805001[0]);
                                    }
                                    
                                    var collectResult_10810013 = newSeq_10820004(0);
                                    L3: do {
                                      var x_10820053 = [];
                                      var lastHEX60gensym29_10850122 = 0;
                                      var splitsHEX60gensym29_10850123 = -1;
                                      L4: do {
                                          L5: while (true) {
                                          if (!(lastHEX60gensym29_10850122 <= 7)) break L5;
                                            var firstHEX60gensym29_10850125 = lastHEX60gensym29_10850122;
                                            L6: do {
                                                L7: while (true) {
                                                if (!((lastHEX60gensym29_10850122 < 7) && !((ConstSet19[makeNimstrLit("v s1 s2")[chckIndx(lastHEX60gensym29_10850122, 0, (makeNimstrLit("v s1 s2")).length-1)]] != undefined)))) break L7;
                                                  lastHEX60gensym29_10850122 = addInt(lastHEX60gensym29_10850122, 1);
                                                }
                                            } while(false);
                                            if ((splitsHEX60gensym29_10850123 == 0)) {
                                            lastHEX60gensym29_10850122 = 7;
                                            }
                                            
                                            x_10820053 = substr_1571022(makeNimstrLit("v s1 s2"), firstHEX60gensym29_10850125, subInt(lastHEX60gensym29_10850122, 1));
                                            var fmtRes_10820054 = [mnewString(0)];
                                            formatValue_10645080(fmtRes_10820054, 0, idbase_10755005, []);
                                            formatValue_10645080(fmtRes_10820054, 0, x_10820053, []);
                                            fmtRes_10820054[0].push.apply(fmtRes_10820054[0], makeNimstrLit("r"));;
                                            collectResult_10810013.push(floatHtml_10730044(toJSStr(fmtRes_10820054[0])));;
                                            if ((splitsHEX60gensym29_10850123 == 0)) {
                                            break L4;
                                            }
                                            
                                            splitsHEX60gensym29_10850123 = subInt(splitsHEX60gensym29_10850123, 1);
                                            lastHEX60gensym29_10850122 = addInt(lastHEX60gensym29_10850122, 1);
                                          }
                                      } while(false);
                                    } while(false);
                                    var vals_10825011 = nimCopy(null, collectResult_10810013, NTI10820008);
                                    var arp_10825018 = mean_10765020(vals_10825011);
                                    var arp2_10825019 = (arp_10825018 - floatVal_10726018("v0"));
                                    var fmtRes_10830001 = [mnewString(0)];
                                    formatValue_10775001(fmtRes_10830001, 0, arp_10825018, makeNimstrLit(".3f"));
                                    document.getElementById(toJSStr(idArp_10755010)).innerHTML = toJSStr(fmtRes_10830001[0]);
                                    var fmtRes_10840001 = [mnewString(0)];
                                    formatValue_10775001(fmtRes_10840001, 0, arp2_10825019, makeNimstrLit(".3f"));
                                    document.getElementById(toJSStr(idArp2_10755011)).innerHTML = toJSStr(fmtRes_10840001[0]);
--excHandler;
} catch (EXC) {
 var prevJSError = lastJSError;
 lastJSError = EXC;
 --excHandler;
                                    framePtr = Tmp2;
                                    if (lastJSError && (isObj(lastJSError.m_type, NTI1194643))) {
                                    break BeforeRet;
                                    }
                                    else {
                                    	reraiseException();
                                    }
                                    lastJSError = prevJSError;
                                    } finally {
                                    framePtr = Tmp2;
                                    }
                                  } while (false);

                                  
                                }

                                document.getElementById(toJSStr((idbase_10755005 || []).concat(idPart_10755003 || [],i_10755004 || []))).onchange = HEX3Aanonymous_10760001;
                                document.getElementById(toJSStr((idbase_10755005 || []).concat(idPart_10755003 || [],i_10755004 || []))).onchange(null);

                              
                            }

    L1: do {
      var record_10750214 = null;
      var record_10750214_Idx = 0;
      var colontmp__10850105 = [];
      colontmp__10850105 = document.getElementsByClassName("pointRec");
      var i_10850107 = 0;
      var L_10850108 = (colontmp__10850105).length;
      L2: do {
          L3: while (true) {
          if (!(i_10850107 < L_10850108)) break L3;
            record_10750214 = colontmp__10850105; record_10750214_Idx = chckIndx(i_10850107, 0, (colontmp__10850105).length-1);
            var point_10750215 = cstrToNimstr(record_10750214[record_10750214_Idx].getAttribute("point"));
            var session_10750216 = cstrToNimstr(record_10750214[record_10750214_Idx].getAttribute("session"));
            var idbase_10750217 = (makeNimstrLit("_") || []).concat(point_10750215 || [],session_10750216 || []);
            L4: do {
              var idPart_10750265 = [];
              var i_10850103 = 0;
              if ((i_10850103 <= 2)) {
              L5: do {
                  L6: while (true) {
                  if (!true) break L6;
                    idPart_10750265 = (Tmp7 = [makeNimstrLit("v"), makeNimstrLit("s1"), makeNimstrLit("s2")], Tmp7)[chckIndx(i_10850103, 0, (Tmp7).length-1)];
                    var idStart_10750266 = (idbase_10750217 || []).concat(idPart_10750265 || [],makeNimstrLit("0") || []);
                    var idEnd_10750267 = (idbase_10750217 || []).concat(idPart_10750265 || [],makeNimstrLit("1") || []);
                    var idDiff_10750268 = (idbase_10750217 || []).concat(idPart_10750265 || [],makeNimstrLit("d") || []);
                    var idReduced_10750269 = (idbase_10750217 || []).concat(idPart_10750265 || [],makeNimstrLit("r") || []);
                    var idArp_10750270 = (idbase_10750217 || []).concat(makeNimstrLit("arp") || []);
                    var idArp2_10750271 = (idbase_10750217 || []).concat(makeNimstrLit("arp2") || []);
                    L8: do {
                      var i_10750334 = [];
                      var i_10850097 = 0;
                      if ((i_10850097 <= 1)) {
                      L9: do {
                          L10: while (true) {
                          if (!true) break L10;
                            i_10750334 = (Tmp11 = [makeNimstrLit("0"), makeNimstrLit("1")], Tmp11)[chckIndx(i_10850097, 0, (Tmp11).length-1)];
                            HEX3Aanonymous_10755001(idPart_10750265, i_10750334, idbase_10750217, idStart_10750266, idEnd_10750267, idDiff_10750268, idReduced_10750269, idArp_10750270, idArp2_10750271);
                            if ((1 <= i_10850097)) {
                            break L9;
                            }
                            
                            i_10850097 = addInt(i_10850097, 1);
                          }
                      } while(false);
                      }
                      
                    } while(false);
                    if ((2 <= i_10850103)) {
                    break L5;
                    }
                    
                    i_10850103 = addInt(i_10850103, 1);
                  }
              } while(false);
              }
              
            } while(false);
            i_10850107 = addInt(i_10850107, 1);
            if (!(((colontmp__10850105).length == L_10850108))) {
            failedAssertImpl_1305480(makeNimstrLit("iterators.nim(204, 11) `len(a) == L` the length of the seq changed while iterating over it"));
            }
            
          }
      } while(false);
    } while(false);

  
}
